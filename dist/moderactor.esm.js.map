{"version":3,"file":"moderactor.esm.js","sources":["../src/core/adapter.js","../src/core/requests.js","../src/core/state.js","../src/adapters/bridge.js","../src/adapters/forumactif.js","../src/core/utils.js","../src/actions/_base.js","../src/actions/forum.js","../src/actions/topic.js","../src/actions/post.js","../src/actions/user.js","../src/actions/chat.js","../src/core/jsonld.js","../src/parsers/pagination.js","../src/parsers/statsForum.js","../src/parsers/statsTopic.js","../src/env.js","../src/moderactor.js"],"sourcesContent":["export class Adapter {\r\n    async get(url) {\r\n        throw new Error(\"Adapter.get not implemented\");\r\n    }\r\n    async post(url, data) {\r\n        throw new Error(\"Adapter.post not implemented\");\r\n    }\r\n    async getForm(url, formSelector) {\r\n        throw new Error(\"Adapter.getForm not implemented\");\r\n    }\r\n    bridge(resp) {\r\n        throw new Error(\"Adapter.bridge not implemented\");\r\n    }\r\n    get tid() {\r\n        return null;\r\n    }\r\n    get pagetype() {\r\n        return \"\";\r\n    }\r\n}\r\n","function encodeForm(data) {\r\n    var form_data = new FormData();\r\n\r\n    for (var key in data) {\r\n        form_data.append(key, data[key]);\r\n    }\r\n    return [...form_data.entries()]\r\n        .map((x) => `${encodeURIComponent(x[0])}=${encodeURIComponent(x[1])}`)\r\n        .join(\"&\");\r\n}\r\n\r\nexport function htmlFromText(text) {\r\n    const parser = new DOMParser();\r\n    return parser.parseFromString(text, \"text/html\");\r\n}\r\n\r\nexport async function httpGet(url) {\r\n    const r = await fetch(url, { credentials: \"same-origin\" });\r\n    const text = await r.text();\r\n    return { ok: r.ok, status: r.status, text, doc: htmlFromText(text) };\r\n}\r\n\r\nexport async function httpPost(url, data) {\r\n    const body = encodeForm(data);\r\n    const r = await fetch(url, {\r\n        method: \"POST\",\r\n        credentials: \"same-origin\",\r\n        headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\r\n        },\r\n        body,\r\n    });\r\n    const text = await r.text();\r\n    return { ok: r.ok, status: r.status, text, doc: htmlFromText(text) };\r\n}\r\n","function getTidFromDomOrUrl() {\r\n    const input = document.querySelector(\"input[name=tid]\");\r\n    if (input?.value) return input.value;\r\n\r\n    const anchor = document.querySelector(\"a[href*='&tid=']\");\r\n    const href = anchor?.getAttribute(\"href\") || \"\";\r\n    const m = href.match(/[?&]tid=([a-z0-9]+)/i);\r\n    if (m) return m[1];\r\n\r\n    // fallback: parse pathname (/t123-/f456-)\r\n    const p = location.pathname;\r\n    const t = p.match(/\\/t(\\d+)(?:p\\d+)?-/);\r\n    if (t) return t[1];\r\n    const f = p.match(/\\/f(\\d+)(?:p\\d+)?-/);\r\n    if (f) return f[1];\r\n\r\n    return null;\r\n}\r\n\r\nfunction getPageType() {\r\n    const p = location.pathname;\r\n    if (/^\\/t\\d+(p\\d+)?-/.test(p)) return \"topic\";\r\n    if (/^\\/f\\d+(p\\d+)?-/.test(p)) return \"forum\";\r\n    if (/^\\/c\\d+-/.test(p)) return \"category\";\r\n    if (/^\\/u\\d+-/.test(p)) return \"profile\";\r\n    const qs = p + location.search;\r\n    const m = qs.match(/\\/modcp\\?mode=([^&]+)/);\r\n    return m ? m[1] : \"\";\r\n}\r\n\r\nfunction getResId() {\r\n    const p = location.pathname;\r\n    let m = p.match(/^\\/[tfc](\\d+)(?:p\\d+)?-/);\r\n    if (!m) m = p.match(/^\\/u(\\d+)/);\r\n    return m ? Number(m[1]) : 0;\r\n}\r\n\r\nfunction getPageNum() {\r\n    const p = location.pathname;\r\n    const m = p.match(/^\\/[tf]\\d+(p\\d+)-/);\r\n    return m ? Number(m[1].slice(1)) : 0;\r\n}\r\n\r\nexport const state = {\r\n    get tid() {\r\n        return getTidFromDomOrUrl();\r\n    },\r\n    get pagetype() {\r\n        return getPageType();\r\n    },\r\n    get resid() {\r\n        return getResId();\r\n    },\r\n    get pagenum() {\r\n        return getPageNum();\r\n    },\r\n    get charset() {\r\n        return (\r\n            document.charset ||\r\n            document.characterSet ||\r\n            \"utf-8\"\r\n        ).toLowerCase();\r\n    },\r\n};\r\n","// ──────────────────────────────────────────────────────────────────────────────\r\n// File: src/adapters/phpbb3/bridge.js\r\n// ──────────────────────────────────────────────────────────────────────────────\r\n// Bridge pour Forumactif : parse les pages de confirmation/erreur\r\n\r\nfunction first(el, sel) {\r\n    return el.querySelector(sel) || undefined;\r\n}\r\nfunction all(el, sel) {\r\n    return Array.from(el.querySelectorAll(sel));\r\n}\r\n\r\nfunction extractMessage(doc) {\r\n    // Récupère tous les <p> et concatène leurs textes\r\n    const ps = Array.from(doc.querySelectorAll(\"p\")).map((p) =>\r\n        p.textContent.trim()\r\n    );\r\n    const text = ps.join(\" \").replace(/\\s+/g, \" \").trim();\r\n    return text;\r\n}\r\n\r\nfunction parseIdsFromHref(href) {\r\n    const ids = {};\r\n    if (!href) return ids;\r\n    const t = href.match(/\\/(?:t|viewtopic\\?.*?t=)(\\d+)/);\r\n    if (t) ids.topic_id = Number(t[1]);\r\n    const f = href.match(/\\/f(\\d+)-/);\r\n    if (f) ids.forum_id = Number(f[1]);\r\n    const p = href.match(/#(\\d+)$/);\r\n    if (p) ids.post_id = Number(p[1]);\r\n    return ids;\r\n}\r\n\r\nfunction inferAction(message) {\r\n    const lower = (message || \"\").toLowerCase();\r\n    if (/déplacé/.test(lower)) return \"topic.move\";\r\n    if (/verrouill/.test(lower) && !/déverrouill/.test(lower))\r\n        return \"topic.lock\";\r\n    if (/déverrouill/.test(lower)) return \"topic.unlock\";\r\n    if (/supprim/.test(lower)) return \"topic.delete\";\r\n    if (/corbeille|poubelle/.test(lower)) return \"topic.trash\";\r\n    if (/répon|enregistré avec succès/.test(lower)) return \"topic.post\";\r\n    if (/nouveau sujet/.test(lower)) return \"forum.post\";\r\n    if (/message priv/.test(lower)) return \"user.pm\";\r\n    if (/banni/.test(lower)) return \"user.ban\";\r\n    if (/débanni|unban/.test(lower)) return \"user.unban\";\r\n    return \"unknown\";\r\n}\r\n\r\nfunction validateOk(action, message) {\r\n    const lowerMsg = (message || \"\").toLowerCase();\r\n    switch (action) {\r\n        case \"topic.move\":\r\n            return /déplacé/.test(lowerMsg);\r\n        case \"topic.lock\":\r\n            return /verrouill/.test(lowerMsg);\r\n        case \"topic.unlock\":\r\n            return /déverrouill/.test(lowerMsg);\r\n        case \"topic.delete\":\r\n            return /supprim/.test(lowerMsg);\r\n        case \"topic.trash\":\r\n            return /corbeille|poubelle/.test(lowerMsg);\r\n        case \"topic.post\":\r\n            return /répon|enregistré avec succès/.test(lowerMsg);\r\n        case \"forum.post\":\r\n            return /nouveau sujet/.test(lowerMsg);\r\n        case \"user.pm\":\r\n            return /message priv/.test(lowerMsg);\r\n        case \"user.ban\":\r\n            return /banni/.test(lowerMsg);\r\n        case \"user.unban\":\r\n            return /débanni|unban/.test(lowerMsg);\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\nexport function bridgeParse(resp) {\r\n    const { doc, text } = resp;\r\n    const message = extractMessage(doc);\r\n\r\n    const firstLink = first(doc, \"a[href]\");\r\n    const href = firstLink ? firstLink.getAttribute(\"href\") : \"\";\r\n    const ids = parseIdsFromHref(href);\r\n\r\n    const action = inferAction(message);\r\n    const ok = validateOk(action, message);\r\n\r\n    const links = {\r\n        first: href || undefined,\r\n        topic:\r\n            all(doc, 'a[href^=\"/t\"], a[href*=\"viewtopic\"]').map((a) =>\r\n                a.getAttribute(\"href\")\r\n            )[0] || undefined,\r\n        forum:\r\n            all(doc, 'a[href^=\"/f\"]').map((a) => a.getAttribute(\"href\"))[0] ||\r\n            undefined,\r\n    };\r\n\r\n    return {\r\n        ok,\r\n        status: resp.status,\r\n        action,\r\n        message,\r\n        ids,\r\n        links,\r\n        href,\r\n        raw: text,\r\n    };\r\n}\r\n\r\nexport const __bridgeInternals = {\r\n    extractMessage,\r\n    parseIdsFromHref,\r\n    inferAction,\r\n    validateOk,\r\n};\r\n","import { Adapter } from \"../core/adapter.js\";\r\nimport { httpGet, httpPost } from \"../core/requests.js\";\r\nimport { state } from \"../core/state.js\";\r\nimport { bridgeParse } from \"./bridge.js\";\r\n\r\nclass ForumactifAdapter extends Adapter {\r\n    async get(url) {\r\n        return httpGet(url);\r\n    }\r\n    async post(url, data) {\r\n        return httpPost(url, data);\r\n    }\r\n\r\n    async getForm(url, formSelector) {\r\n        const resp = await this.get(url);\r\n        if (!resp.ok)\r\n            return { ok: false, status: resp.status, text: resp.text };\r\n        const form = resp.doc.querySelector(formSelector);\r\n        if (!form) return { ok: false, status: 404, text: \"Form not found\" };\r\n        const fd = new FormData(form);\r\n        const obj = Object.fromEntries(fd.entries());\r\n        return { ok: true, data: obj, doc: resp.doc };\r\n    }\r\n\r\n    bridge(resp) {\r\n        return bridgeParse(resp);\r\n    }\r\n    get tid() {\r\n        return state.tid;\r\n    }\r\n    get pagetype() {\r\n        return state.pagetype;\r\n    }\r\n}\r\n\r\nconst forumactifAdapter = new ForumactifAdapter();\r\nexport default forumactifAdapter;\r\n","export const isArray = Array.isArray;\r\n\r\nexport const toArray = (v) => (v == null ? [] : isArray(v) ? v : [v]);\r\n\r\nexport function byIdOrArray(input) {\r\n    return toArray(input)\r\n        .filter((x) => x != null)\r\n        .map((x) => (typeof x === \"number\" ? x : parseInt(String(x), 10)))\r\n        .filter((x) => Number.isFinite(x) && x > 0);\r\n}\r\n\r\nexport function safeLower(s) {\r\n    return String(s || \"\").toLowerCase();\r\n}\r\nexport function text(el) {\r\n    return (el?.textContent || \"\").trim();\r\n}\r\nexport function toISO(d) {\r\n    try {\r\n        return new Date(d).toISOString();\r\n    } catch {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const getDirectText = (el) =>\r\n    !el\r\n        ? \"\"\r\n        : Array.from(el.childNodes)\r\n              .filter((n) => n.nodeType === Node.TEXT_NODE)\r\n              .map((n) => n.nodeValue.trim())\r\n              .filter(Boolean)\r\n              .join(\" \");\r\n\r\nexport const num = (s) => {\r\n    const m = String(s || \"\")\r\n        .replace(/\\s/g, \"\")\r\n        .match(/-?\\d+/);\r\n    return m ? Number(m[0]) : undefined;\r\n};\r\n\r\nexport const idsFromHref = (href) => {\r\n    const ids = {};\r\n    if (!href) return ids;\r\n    const t = href.match(/\\/t(\\d+)/) || href.match(/[?&]t=(\\d+)/);\r\n    const p = href.match(/#p?(\\d+)$/);\r\n    const f = href.match(/\\/f(\\d+)-/);\r\n    if (t) ids.topic_id = Number(t[1]);\r\n    if (p) ids.post_id = Number(p[1]);\r\n    if (f) ids.forum_id = Number(f[1]);\r\n    return ids;\r\n};\r\n\r\nexport function uniq(arr) {\r\n    return Array.from(new Set(arr));\r\n}\r\n\r\n// Extrait {id, slug} depuis une URL canonique /t238-mon-sujet\r\nexport function parseFromUrl(u) {\r\n    try {\r\n        const href = typeof u === \"string\" ? u : u?.href || \"\";\r\n        const m = href.match(/\\/[ftc](\\d+)(?:[p]\\d+)?-([a-z0-9-]+)/i);\r\n        return m ? { id: Number(m[1]), slug: m[2] } : {};\r\n    } catch {\r\n        return {};\r\n    }\r\n}\r\n","import { byIdOrArray } from \"../core/utils.js\";\r\n\r\nexport class BaseResource {\r\n    constructor(ids, adapter) {\r\n        this.ids = byIdOrArray(ids);\r\n        this.adapter = adapter;\r\n    }\r\n    _all(promises) {\r\n        return Promise.all(promises);\r\n    }\r\n}\r\n","import { BaseResource } from \"./_base.js\";\r\n\r\nexport default class ForumResource extends BaseResource {\r\n    async post(input) {\r\n        const { subject, message, notify = 0 } = input || {};\r\n        if (!subject || !message)\r\n            throw new Error(\"Forum.post: subject et message sont requis\");\r\n        const tasks = this.ids.map((f) =>\r\n            this.adapter\r\n                .post(\"/post\", {\r\n                    post: 1,\r\n                    mode: \"newtopic\",\r\n                    f,\r\n                    subject,\r\n                    message,\r\n                    notify,\r\n                })\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n}\r\n","import { BaseResource } from \"./_base.js\";\r\n\r\nexport default class TopicResource extends BaseResource {\r\n    async post(input) {\r\n        const { message, notify = 0 } = input || {};\r\n        if (!message) throw new Error(\"Topic.post: message est requis\");\r\n        const tasks = this.ids.map((t) =>\r\n            this.adapter\r\n                .post(\"/post\", { post: 1, mode: \"reply\", t, message, notify })\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n\r\n    async lock() {\r\n        const tid = this.adapter.tid;\r\n        if (!tid) throw new Error(\"Topic.lock: tid introuvable\");\r\n        const tasks = this.ids.map((t) =>\r\n            this.adapter\r\n                .get(`/modcp?mode=lock&t=${t}&tid=${tid}`)\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n\r\n    async unlock() {\r\n        const tid = this.adapter.tid;\r\n        if (!tid) throw new Error(\"Topic.unlock: tid introuvable\");\r\n        const tasks = this.ids.map((t) =>\r\n            this.adapter\r\n                .get(`/modcp?mode=unlock&t=${t}&tid=${tid}`)\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n\r\n    async move(newForumId) {\r\n        if (!newForumId) throw new Error(\"Topic.move: forum id manquant\");\r\n        const tid = this.adapter.tid;\r\n        if (!tid) throw new Error(\"Topic.move: tid introuvable\");\r\n        const tasks = this.ids.map((t) =>\r\n            this.adapter\r\n                .post(`/modcp?tid=${tid}`, {\r\n                    tid,\r\n                    new_forum: \"f\" + newForumId,\r\n                    mode: \"move\",\r\n                    t,\r\n                    confirm: 1,\r\n                })\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n\r\n    async trash() {\r\n        const tid = this.adapter.tid;\r\n        if (!tid) throw new Error(\"Topic.trash: tid introuvable\");\r\n        const tasks = this.ids.map((t) =>\r\n            this.adapter\r\n                .get(`/modcp?mode=trash&t=${t}&tid=${tid}`)\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n\r\n    async delete() {\r\n        const tid = this.adapter.tid;\r\n        if (!tid) throw new Error(\"Topic.remove: tid introuvable\");\r\n        const tasks = this.ids.map((t) =>\r\n            this.adapter\r\n                .post(`/modcp?tid=${tid}`, { t, mode: \"delete\", confirm: 1 })\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n}\r\n","import { BaseResource } from \"./_base.js\";\r\n\r\nexport default class PostResource extends BaseResource {\r\n    async delete() {\r\n        const tasks = this.ids.map((p) =>\r\n            this.adapter\r\n                .post(\"/post\", { p, mode: \"delete\", confirm: \"\" })\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n\r\n    async update({ message }) {\r\n        if (!message) throw new Error(\"Post.update: message requis\");\r\n        const tasks = this.ids.map(async (p) => {\r\n            const form = await this.adapter.getForm(\r\n                `/post?p=${p}&mode=editpost`,\r\n                'form[name=\"post\"]'\r\n            );\r\n            if (!form.ok) return form;\r\n            const data = { ...form.data, message };\r\n            data.post = 1;\r\n            const resp = await this.adapter.post(\"/post\", data);\r\n            return this.adapter.bridge(resp);\r\n        });\r\n        return this._all(tasks);\r\n    }\r\n}\r\n","import { BaseResource } from \"./_base.js\";\r\n\r\nexport default class UserResource extends BaseResource {\r\n    async pm({ subject, message }) {\r\n        if (!subject || !message)\r\n            throw new Error(\"User.pm: subject et message requis\");\r\n        const username = this.ids.join(\", \");\r\n        const resp = await this.adapter.post(\"/privmsg\", {\r\n            username,\r\n            mode: \"post\",\r\n            post: 1,\r\n            subject,\r\n            message,\r\n        });\r\n        return this.adapter.bridge(resp);\r\n    }\r\n\r\n    async ban({ days = 0, reason = \"\" } = {}) {\r\n        const tid = this.adapter.tid;\r\n        if (!tid) throw new Error(\"User.ban: tid introuvable\");\r\n        const tasks = this.ids.map((user_id) =>\r\n            this.adapter\r\n                .post(`/modcp?tid=${tid}`, {\r\n                    tid,\r\n                    confirm: 1,\r\n                    mode: \"ban\",\r\n                    user_id,\r\n                    ban_user_date: days,\r\n                    ban_user_reason: reason,\r\n                })\r\n                .then((r) => this.adapter.bridge(r))\r\n        );\r\n        return this._all(tasks);\r\n    }\r\n\r\n    async unban() {\r\n        const tid = this.adapter.tid;\r\n        if (!tid) throw new Error(\"User.unban: tid introuvable\");\r\n        const resp = await this.adapter.post(\r\n            `/admin/index.forum?part=users_groups&sub=users&mode=ban_control&extended_admin=1&tid=${tid}`,\r\n            { users_to_unban: this.ids, unban_users: 1 }\r\n        );\r\n        return this.adapter.bridge(resp);\r\n    }\r\n}\r\n","import { BaseResource } from \"./_base.js\";\r\n\r\nexport default class ChatResource extends BaseResource {\r\n    constructor(adapter) {\r\n        super([], adapter);\r\n    }\r\n    async post({ message }) {\r\n        if (!message) throw new Error(\"Chat.post: message requis\");\r\n        await this.adapter.post(\"/chatbox/actions.forum\", {\r\n            method: \"send\",\r\n            archive: 0,\r\n            message,\r\n        });\r\n        return { ok: true };\r\n    }\r\n}\r\n","// src/core/jsonld.js\r\n// Utilitaires de parsing JSON‑LD (BreadcrumbList, DiscussionForumPosting, …)\r\n// - découplé du thème\r\n// - extensible via un registre de handlers\r\n\r\n/** Récupère tous les <script type=\"application/ld+json\"> du document */\r\nexport function getJsonLdNodes(doc = document) {\r\n    return Array.from(\r\n        doc.querySelectorAll('script[type=\"application/ld+json\"]')\r\n    );\r\n}\r\n\r\n/** Parse un <script> en JSON JS (retourne [] si erreur) */\r\nexport function parseJsonLdScript(node) {\r\n    try {\r\n        const txt = (node?.textContent || \"\").trim();\r\n        if (!txt) return [];\r\n        const parsed = JSON.parse(txt);\r\n        return normalizeJsonLdRoot(parsed);\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\n/** Normalise la racine: peut être objet, tableau, ou contenir @graph */\r\nexport function normalizeJsonLdRoot(root) {\r\n    const arr = Array.isArray(root) ? root : [root];\r\n    // aplatis les @graph éventuels\r\n    const items = [];\r\n    for (const it of arr) {\r\n        if (it && Array.isArray(it[\"@graph\"])) items.push(...it[\"@graph\"]);\r\n        else items.push(it);\r\n    }\r\n    // filtre les objets valides ayant un @type\r\n    return items.filter((x) => x && typeof x === \"object\" && x[\"@type\"]);\r\n}\r\n\r\n/* ===========================\r\n   Handlers par type JSON-LD\r\n   =========================== */\r\n\r\n/** Handler: BreadcrumbList → { type:'BreadcrumbList', items:[{position,url,name}] } */\r\nexport function extractBreadcrumbList(obj) {\r\n    if (\r\n        obj[\"@type\"] !== \"BreadcrumbList\" ||\r\n        !Array.isArray(obj.itemListElement)\r\n    )\r\n        return null;\r\n    const items = obj.itemListElement\r\n        .filter((li) => li && li[\"@type\"] === \"ListItem\" && li.item)\r\n        .map((li) => ({\r\n            position: Number(li.position) || null,\r\n            url: (li.item && (li.item[\"@id\"] || li.item.url)) || null,\r\n            name: (li.item && li.item.name) || null,\r\n        }));\r\n    return items.length ? { type: \"BreadcrumbList\", items } : null;\r\n}\r\n\r\n/** Handler: DiscussionForumPosting → objet normalisé du topic */\r\nexport function extractDiscussionForumPosting(obj) {\r\n    if (obj[\"@type\"] !== \"DiscussionForumPosting\") return null;\r\n    const interaction = obj.interactionStatistic || {};\r\n    const interactionCount = Number(interaction.userInteractionCount) || null;\r\n    return {\r\n        type: \"DiscussionForumPosting\",\r\n        headline: obj.headline || null,\r\n        name: obj.name || null,\r\n        url: obj.url || null,\r\n        datePublished: obj.datePublished || null,\r\n        dateModified: obj.dateModified || null,\r\n        pageStart: Number(obj.pageStart) || null,\r\n        pageEnd: Number(obj.pageEnd) || null,\r\n        author: obj.author?.name || null,\r\n        author_url: obj.author?.url || null,\r\n        publisher: obj.publisher?.name || null,\r\n        logo: obj.publisher?.logo?.url || null,\r\n        image: obj.image || null,\r\n        interactionCount,\r\n    };\r\n}\r\n\r\n/* ===========================\r\n   Registre extensible\r\n   =========================== */\r\n\r\nconst defaultHandlers = new Map([\r\n    [\"BreadcrumbList\", extractBreadcrumbList],\r\n    [\"DiscussionForumPosting\", extractDiscussionForumPosting],\r\n]);\r\n\r\n/** Permet d’enregistrer/écraser un handler pour un @type donné */\r\nexport function registerJsonLdHandler(type, handlerFn) {\r\n    defaultHandlers.set(type, handlerFn);\r\n}\r\n\r\n/**\r\n * Parse tout le JSON‑LD de la page et renvoie un objet par type.\r\n * @param {Document} doc\r\n * @param {string[]=} onlyTypes liste de types à extraire (sinon tous ceux connus)\r\n * @returns {{ byType: Record<string, any[]>, all: any[] }}\r\n */\r\nexport function extractJsonLd(doc = document, onlyTypes) {\r\n    const nodes = getJsonLdNodes(doc);\r\n    const resultsByType = {};\r\n    const allRaw = [];\r\n\r\n    for (const node of nodes) {\r\n        const items = parseJsonLdScript(node);\r\n        for (const obj of items) {\r\n            const t = Array.isArray(obj[\"@type\"])\r\n                ? obj[\"@type\"][0]\r\n                : obj[\"@type\"];\r\n            allRaw.push(obj);\r\n\r\n            // Filtrage par types demandés (facultatif)\r\n            if (onlyTypes && !onlyTypes.includes(t)) continue;\r\n\r\n            // Si on a un handler, on l’applique\r\n            const handler = defaultHandlers.get(t);\r\n            if (handler) {\r\n                const normalized = handler(obj);\r\n                if (normalized) {\r\n                    if (!resultsByType[t]) resultsByType[t] = [];\r\n                    resultsByType[t].push(normalized);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return { byType: resultsByType, all: allRaw };\r\n}\r\n\r\n/** Raccourcis pratiques pour les 2 types courants */\r\nexport function extractBreadcrumbs(doc = document) {\r\n    return (\r\n        extractJsonLd(doc, [\"BreadcrumbList\"]).byType[\"BreadcrumbList\"] || []\r\n    );\r\n}\r\n\r\nexport function extractDiscussion(doc = document) {\r\n    return (\r\n        extractJsonLd(doc, [\"DiscussionForumPosting\"]).byType[\r\n            \"DiscussionForumPosting\"\r\n        ] || []\r\n    );\r\n}\r\n","export function parsePagination(\r\n    doc,\r\n    { pageSizeOverride, defaultPageSize = 50 } = {}\r\n) {\r\n    const out = {\r\n        current: undefined,\r\n        total: undefined,\r\n        page_size_detected: undefined,\r\n    };\r\n\r\n    // 1) Trouver le conteneur de pagination\r\n    const pager =\r\n        doc.querySelector(\".pagination\") ||\r\n        doc.querySelector(\".pagelink\") ||\r\n        doc.querySelector(\".topic-actions .pagination\");\r\n    if (pager) {\r\n        const txt = pager.textContent.replace(/\\s+/g, \" \").trim().toLowerCase();\r\n        // \"page 1 sur 750\" (FR) ou \"page 1 of 750\" (EN)\r\n        const m = txt.match(/page\\s+(\\d+)\\s+(?:sur|of)\\s+(\\d+)/i);\r\n        if (m) {\r\n            out.current = Number(m[1]);\r\n            out.total = Number(m[2]);\r\n        }\r\n    }\r\n\r\n    // 2) Heuristique taille de page : (a) override\r\n    let pageSize = Number.isFinite(pageSizeOverride)\r\n        ? pageSizeOverride\r\n        : undefined;\r\n\r\n    // 3) (b) Script inline Forumactif : start = (start - 1) * 35;\r\n    if (!pageSize && pager) {\r\n        for (const s of pager.querySelectorAll(\"script\")) {\r\n            const code = s.textContent || \"\";\r\n            const mm = code.match(/start\\s*=\\s*\\(start\\s*-\\s*1\\)\\s*\\*\\s*(\\d+)/);\r\n            if (mm) {\r\n                pageSize = Number(mm[1]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 4) (c) Déduction via les liens /f103p35-... /f103p70-...\r\n    if (!pageSize && pager) {\r\n        const ps = [];\r\n        pager.querySelectorAll('a[href*=\"/f\"][href*=\"p\"]').forEach((a) => {\r\n            const href = a.getAttribute(\"href\") || \"\";\r\n            const m2 = href.match(/\\/f\\d+p(\\d+)-/i);\r\n            if (m2) ps.push(Number(m2[1]));\r\n        });\r\n        // La plus petite valeur non nulle correspond généralement à la taille de page\r\n        if (ps.length) {\r\n            const minPos = Math.min(...ps.filter((n) => n > 0));\r\n            if (Number.isFinite(minPos)) pageSize = minPos;\r\n        }\r\n    }\r\n\r\n    // 5) Fallback\r\n    if (!pageSize) pageSize = defaultPageSize;\r\n\r\n    out.page_size_detected = pageSize;\r\n    return out;\r\n}\r\n","import { getDirectText, idsFromHref } from \"../core/utils.js\";\r\nimport { extractBreadcrumbs } from \"../core/jsonld.js\";\r\nimport { parsePagination } from \"./pagination.js\";\r\n\r\n// Compte les lignes de sujets (selon plusieurs templates)\r\nconst countTopics = (doc) => {\r\n    const candidates = [\r\n        \"tr.topic\", // phpBB3\r\n        \"tr.rowtopic\", // anciens thèmes\r\n        \"li.topic\", // ModernBB/PunBB custom\r\n        \"div.topic\", // variantes\r\n        \"div.topics li\", // listes\r\n        \"a.topictitle\", // phpBB-like\r\n        \".topicslist_row.row\", // fallback parfois utile\r\n    ];\r\n    let max = 0;\r\n    for (const sel of candidates) {\r\n        const c = doc.querySelectorAll(sel).length;\r\n        max = Math.max(max, c);\r\n    }\r\n    // si on trouve 0, on ne renvoie rien (undefined)\r\n    return max || undefined;\r\n};\r\n\r\n// Récupère des métadonnées (titre, fil d’Ariane)\r\nconst readForumMeta = (doc) => {\r\n    // Titre de la page\r\n    const titleEl = doc.querySelector(\"h1.page-title, h1, .page-title\");\r\n    const name =\r\n        getDirectText(titleEl) ||\r\n        (titleEl?.textContent || \"\").trim() ||\r\n        undefined;\r\n\r\n    // id forum via canonical, breadcrumb ou premier lien /fXX-\r\n    let forum_id;\r\n    const canonical =\r\n        doc.querySelector('link[rel=\"canonical\"]')?.getAttribute(\"href\") || \"\";\r\n    forum_id = idsFromHref(canonical).forum_id;\r\n\r\n    // lien forum courant (utile pour re-naviguer)\r\n    const forumHref = canonical;\r\n\r\n    return {\r\n        name,\r\n        forum_id: Number.isFinite(forum_id) ? forum_id : undefined,\r\n        forumHref,\r\n    };\r\n};\r\n\r\n// Détection permission (peut varier)\r\n// Grossièrement selon la présence d’un bouton \"Nouveau\", \"Nouveau sujet\" ou d’un formulaire\r\nconst readPermissions = (doc) => {\r\n    const canPost =\r\n        !!doc.querySelector(\r\n            'a[href*=\"mode=newtopic\"], a[href*=\"post?f=\"], .button-newtopic, .btn-newtopic'\r\n        ) ||\r\n        !!doc.querySelector(\r\n            'form[action*=\"mode=newtopic\"], form[action*=\"/post\"]'\r\n        );\r\n\r\n    return { can_post: canPost };\r\n};\r\n\r\nexport function parseForumStats(\r\n    doc,\r\n    { pageSizeOverride, defaultPageSize = 50 } = {}\r\n) {\r\n    const meta = readForumMeta(doc);\r\n    const topicsListCount = countTopics(doc);\r\n    const perms = readPermissions(doc);\r\n\r\n    const pagination = parsePagination(doc, {\r\n        pageSizeOverride,\r\n        defaultPageSize,\r\n    });\r\n    const topics_estimated =\r\n        Number.isFinite(pagination.total) &&\r\n        Number.isFinite(pagination.page_size_detected)\r\n            ? pagination.total * pagination.page_size_detected\r\n            : undefined;\r\n\r\n    return {\r\n        id: meta.forum_id,\r\n        name: meta.name,\r\n        topics_count: topics_estimated ?? topicsListCount,\r\n        href: meta.forumHref || undefined,\r\n        pagination: {\r\n            current: pagination.current,\r\n            total: pagination.total,\r\n            page_size: pagination.page_size_detected,\r\n            topics_estimated: topics_estimated, // estimation globale par pagination\r\n            topics_visible: topicsListCount || undefined, // comptage réel de la page courante\r\n        },\r\n        permissions: perms,\r\n    };\r\n}\r\n","import { parseFromUrl } from \"../core/utils.js\";\r\nimport { parsePagination } from \"./pagination.js\";\r\n\r\nfunction countReplies(doc) {\r\n    const candidates = [\".postbody\"];\r\n    let max = 0;\r\n    for (const sel of candidates) {\r\n        const c = doc.querySelectorAll(sel).length;\r\n        max = Math.max(max, c);\r\n    }\r\n    // si on trouve 0, on ne renvoie rien (undefined)\r\n    return max || undefined;\r\n}\r\n\r\nexport function parseTopicStats(\r\n    doc,\r\n    { pageSizeOverride, defaultPageSize = 25 } = {}\r\n) {\r\n    const discussion = extractDiscussion(doc)[0] || null;\r\n    const breadcrumb = extractBreadcrumbs(doc)[0] || null;\r\n\r\n    const title =\r\n        discussion?.headline ||\r\n        doc.querySelector(\"h1.page-title\")?.textContent?.trim() ||\r\n        null;\r\n    const canonical = doc.querySelector('link[rel=\"canonical\"]')?.href || null;\r\n\r\n    const meta = parseFromUrl(canonical);\r\n    const url = canonical || null;\r\n    const topic_id = meta.id || null;\r\n\r\n    const repliesListCount = countReplies(doc);\r\n\r\n    // 2) JSON‑LD (dates + total comments/pages)\r\n\r\n    // 4) Pagination visible\r\n    const pagination = parsePagination(doc, {\r\n        pageSizeOverride,\r\n        defaultPageSize,\r\n    });\r\n    const replies_estimated =\r\n        Number.isFinite(pagination.total) &&\r\n        Number.isFinite(pagination.page_size_detected)\r\n            ? pagination.total * pagination.page_size_detected\r\n            : undefined;\r\n\r\n    return {\r\n        id: topic_id,\r\n        url,\r\n        slug: meta.slug || null,\r\n        title,\r\n        pagination: {\r\n            current: pagination.current,\r\n            total: pagination.total,\r\n            page_size: pagination.page_size_detected,\r\n            replies_estimated: replies_estimated, // estimation globale par pagination\r\n            replies_visible: repliesListCount || undefined, // comptage réel de la page courante\r\n        },\r\n        replies_count: replies_estimated ?? repliesListCount,\r\n    };\r\n}\r\n","import { state } from \"./core/state.js\";\r\nimport { extractDiscussion, extractBreadcrumbs } from \"./core/jsonld.js\";\r\nimport { getDirectText, text } from \"./core/utils.js\";\r\nimport { parseForumStats } from \"./parsers/statsForum.js\";\r\nimport { parseTopicStats } from \"./parsers/statsTopic.js\";\r\n\r\nfunction parseMiscVars(data) {\r\n    const misc = {};\r\n    data.querySelectorAll(\"ul a\").forEach((el) => {\r\n        const l = el.innerText.replace(/[^a-zA-Z]/gi, \"\");\r\n        misc[l] = getDirectText(el.parentNode).replace(/^:/gi, \"\").trim();\r\n    });\r\n\r\n    misc[\"FORUMAGETYPE\"] = \"jours\";\r\n\r\n    misc[\"NOWDAY\"] = new Date().getDate();\r\n    misc[\"NOWMONTH\"] = new Date().getMonth() + 1;\r\n    misc[\"NOWYEAR\"] = new Date().getFullYear();\r\n    misc[\"NOWHOUR\"] = new Date().getHours();\r\n    misc[\"NOWMINUTE\"] = new Date().getMinutes();\r\n\r\n    misc[\"FORUMLASTUSERLINK\"] = misc[\"FORUMLASTUSERLINK\"].replace(\r\n        misc[\"FORUMURLINK\"],\r\n        \"\"\r\n    );\r\n    misc[\"USERLINK\"] = misc[\"USERLINK\"].replace(misc[\"FORUMURLINK\"], \"\");\r\n    misc[\"FORUMLASTUSERID\"] = misc[\"FORUMLASTUSERLINK\"].replace(/[^0-9]/gi, \"\");\r\n\r\n    return {\r\n        misc,\r\n    };\r\n}\r\n\r\nasync function computeStats({\r\n    scope = \"auto\",\r\n    fetchExtra = [],\r\n    forum = {},\r\n    topic = {},\r\n} = {}) {\r\n    const t0 = performance.now();\r\n    const sources = new Set();\r\n    const stats = {};\r\n\r\n    const doc = document;\r\n    const effective = scope === \"auto\" ? state.pagetype || \"auto\" : scope;\r\n\r\n    const defaultExtras = [\r\n        {\r\n            url: \"/popup_help.forum?l=miscvars&i=mes_txt\",\r\n            callback: parseMiscVars,\r\n        },\r\n    ];\r\n    const extras = [...defaultExtras, ...fetchExtra];\r\n\r\n    if (\r\n        effective === \"topic\" ||\r\n        (effective === \"auto\" && state.pagetype === \"forum\")\r\n    ) {\r\n        stats.topic =\r\n            state.pagetype === \"topic\"\r\n                ? parseTopicStats(doc, topic)\r\n                : undefined;\r\n    }\r\n    if (effective === \"forum\" || effective === \"auto\") {\r\n        stats.forum =\r\n            state.pagetype === \"forum\"\r\n                ? parseForumStats(doc, forum)\r\n                : undefined;\r\n    }\r\n\r\n    for (const { url, callback } of extras) {\r\n        try {\r\n            const r = await fetch(url, { credentials: \"same-origin\" });\r\n            sources.add(url);\r\n\r\n            // Détecte le type de réponse\r\n            const ct = r.headers.get(\"content-type\") || \"\";\r\n            let payload;\r\n            if (ct.includes(\"html\")) {\r\n                const html = await r.text();\r\n                payload = new DOMParser().parseFromString(html, \"text/html\");\r\n            } else if (ct.includes(\"json\")) {\r\n                payload = await r.json();\r\n            } else {\r\n                payload = await r.text();\r\n            }\r\n\r\n            const res = await callback(payload);\r\n            if (res && typeof res === \"object\") {\r\n                // Merge « doux »\r\n                for (const [k, v] of Object.entries(res)) {\r\n                    if (typeof v === \"object\" && typeof stats[k] === \"object\") {\r\n                        stats[k] = { ...stats[k], ...v };\r\n                    } else {\r\n                        stats[k] = v;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Merge « intelligent » sur les clés attendues\r\n            Object.assign(stats, res);\r\n        } catch (e) {\r\n            console.error(\"Error fetching extra data:\", e);\r\n        }\r\n    }\r\n\r\n    stats.computed_at = new Date().toISOString();\r\n    stats.elapse_ms = Math.round(performance.now() - t0);\r\n    stats.sources = Array.from(sources);\r\n    return stats;\r\n}\r\n\r\nexport async function env(options = {}) {\r\n    const doc = document;\r\n    const statsWanted = !!options?.stats;\r\n    const forumPageSize = options?.stats?.forum?.pageSize;\r\n\r\n    const discussion = extractDiscussion(doc)[0] || null;\r\n    const breadcrumbs = extractBreadcrumbs(doc)[0] || null;\r\n\r\n    const u = location;\r\n    const hash = u.hash ? u.hash.substring(1) : null;\r\n\r\n    const _ud = typeof _userdata !== \"undefined\" ? _userdata : {};\r\n    const _bd = typeof _board !== \"undefined\" ? _board : {};\r\n\r\n    const data = {\r\n        board: {\r\n            tpl: _ud[\"tpl_used\"],\r\n            reputation_active: Number(_bd[\"reputation_active\"]),\r\n        },\r\n        page: {\r\n            url: u.href,\r\n            type: state.pagetype,\r\n            id: state.resid,\r\n            number: state.pagenum,\r\n            charset: state.charset,\r\n            anchor: hash,\r\n        },\r\n        user: {\r\n            t_id: state.tid,\r\n            name: _ud[\"username\"],\r\n            id: Number(_ud[\"user_id\"]) || undefined,\r\n            is_logged: Number(_ud[\"session_logged_in\"]) === 1,\r\n            is_guest: Number(_ud[\"user_id\"]) === -1,\r\n            is_admin: Number(_ud[\"user_level\"]) == 1,\r\n            is_mod: (Number(_ud[\"user_level\"]) || 0) > 0,\r\n            lang: _ud[\"user_lang\"],\r\n            notifications: Number(_ud[\"notifications\"]),\r\n            avatar: _ud[\"avatar\"],\r\n            avatar_link: _ud[\"avatar_link\"],\r\n            posts: Number(_ud[\"userposts\"]) || undefined,\r\n            privmsgs_count: Number(_ud[\"user_nb_privmsgs\"]) || undefined,\r\n            group_color: _ud[\"groupcolor\"],\r\n        },\r\n        schema: {\r\n            discussion,\r\n            breadcrumbs,\r\n        },\r\n    };\r\n\r\n    if (statsWanted) {\r\n        const s = await computeStats({\r\n            scope: options.scope || \"auto\",\r\n            fetchExtra: options.fetchExtra || [],\r\n            forum: { pageSize: forumPageSize },\r\n        });\r\n        data.stats = s;\r\n    }\r\n\r\n    return data;\r\n}\r\n","import forumactifAdapter from \"./adapters/forumactif.js\";\r\nimport ForumResource from \"./actions/forum.js\";\r\nimport TopicResource from \"./actions/topic.js\";\r\nimport PostResource from \"./actions/post.js\";\r\nimport UserResource from \"./actions/user.js\";\r\nimport ChatResource from \"./actions/chat.js\";\r\nimport { env as envFn } from \"./env.js\";\r\n\r\nconst ENV_GLOBAL_KEY = \"__MODERACTOR_ENV__\";\r\n\r\nconst getGlobal = () => {\r\n    if (typeof globalThis !== \"undefined\") return globalThis;\r\n    if (typeof window !== \"undefined\") return window;\r\n    if (typeof global !== \"undefined\") return global;\r\n    return {};\r\n};\r\n\r\nfunction cacheEnv(value) {\r\n    const g = getGlobal();\r\n    Moderactor._env = value;\r\n    try {\r\n        g[ENV_GLOBAL_KEY] = value;\r\n    } catch {}\r\n    return value;\r\n}\r\n\r\nfunction getCachedEnv() {\r\n    if (Moderactor._env) return Moderactor._env;\r\n    const g = getGlobal();\r\n    if (g[ENV_GLOBAL_KEY]) return (Moderactor._env = g[ENV_GLOBAL_KEY]);\r\n    return null;\r\n}\r\n\r\nfunction refreshEnv(opts = {}) {\r\n    const computed = envFn(opts);\r\n    return cacheEnv(computed);\r\n}\r\n\r\nconst Moderactor = {\r\n    get env() {\r\n        const cached = getCachedEnv();\r\n        return cached ?? refreshEnv({ stats: true });\r\n    },\r\n    set env(opts = {}) {\r\n        return refreshEnv(opts);\r\n    },\r\n    forum: (idOrArray) => {\r\n        if (!getCachedEnv()) refreshEnv({ stats: true });\r\n        new ForumResource(idOrArray, forumactifAdapter);\r\n    },\r\n    topic: (idOrArray) => {\r\n        if (!getCachedEnv()) refreshEnv({ stats: true });\r\n        new TopicResource(idOrArray, forumactifAdapter);\r\n    },\r\n    post: (idOrArray) => {\r\n        if (!getCachedEnv()) refreshEnv({ stats: true });\r\n        new PostResource(idOrArray, forumactifAdapter);\r\n    },\r\n    user: (idOrArray) => {\r\n        if (!getCachedEnv()) refreshEnv({ stats: true });\r\n        new UserResource(idOrArray, forumactifAdapter);\r\n    },\r\n    chat: () => {\r\n        if (!getCachedEnv()) refreshEnv({ stats: true });\r\n        new ChatResource(forumactifAdapter);\r\n    },\r\n    adapter: forumactifAdapter,\r\n};\r\n\r\nif (typeof window !== \"undefined\") {\r\n    window.Moderactor = Moderactor;\r\n}\r\n\r\nexport default Moderactor;\r\n"],"names":["Adapter","get","url","Error","post","data","getForm","formSelector","bridge","resp","tid","pagetype","htmlFromText","text","DOMParser","parseFromString","async","httpPost","body","form_data","FormData","key","append","entries","map","x","encodeURIComponent","join","encodeForm","r","fetch","method","credentials","headers","ok","status","doc","state","input","document","querySelector","value","anchor","m","getAttribute","match","p","location","pathname","t","f","getTidFromDomOrUrl","test","search","getPageType","resid","Number","getResId","pagenum","slice","getPageNum","charset","characterSet","toLowerCase","all","el","sel","Array","from","querySelectorAll","bridgeParse","message","textContent","trim","replace","extractMessage","firstLink","undefined","href","ids","topic_id","forum_id","post_id","parseIdsFromHref","action","lower","inferAction","lowerMsg","validateOk","links","first","topic","a","forum","raw","forumactifAdapter","httpGet","this","form","fd","Object","fromEntries","isArray","byIdOrArray","v","filter","parseInt","String","isFinite","getDirectText","childNodes","n","nodeType","Node","TEXT_NODE","nodeValue","Boolean","BaseResource","constructor","adapter","_all","promises","Promise","ForumResource","subject","notify","tasks","mode","then","TopicResource","lock","unlock","move","newForumId","new_forum","confirm","trash","PostResource","update","UserResource","pm","username","ban","days","reason","user_id","ban_user_date","ban_user_reason","unban","users_to_unban","unban_users","ChatResource","super","archive","parseJsonLdScript","node","txt","root","arr","items","it","push","normalizeJsonLdRoot","JSON","parse","defaultHandlers","Map","obj","itemListElement","li","item","position","name","length","type","interaction","interactionStatistic","interactionCount","userInteractionCount","headline","datePublished","dateModified","pageStart","pageEnd","author","author_url","publisher","logo","image","extractJsonLd","onlyTypes","nodes","getJsonLdNodes","resultsByType","allRaw","includes","handler","normalized","byType","parsePagination","pageSizeOverride","defaultPageSize","out","current","total","page_size_detected","pager","pageSize","s","mm","ps","forEach","m2","minPos","Math","min","readForumMeta","titleEl","canonical","idsFromHref","forumHref","parseForumStats","meta","topicsListCount","candidates","max","c","countTopics","perms","can_post","readPermissions","pagination","topics_estimated","id","topics_count","page_size","topics_visible","permissions","parseTopicStats","discussion","extractDiscussion","extractBreadcrumbs","title","u","slug","parseFromUrl","repliesListCount","countReplies","replies_estimated","replies_visible","replies_count","parseMiscVars","misc","l","innerText","parentNode","Date","getDate","getMonth","getFullYear","getHours","getMinutes","env","options","statsWanted","stats","breadcrumbs","hash","substring","_ud","_userdata","_bd","_board","board","tpl","reputation_active","page","number","user","t_id","is_logged","is_guest","is_admin","is_mod","lang","notifications","avatar","avatar_link","posts","privmsgs_count","group_color","schema","scope","fetchExtra","t0","performance","now","sources","Set","effective","extras","callback","add","ct","payload","html","json","res","k","assign","e","console","error","computed_at","toISOString","elapse_ms","round","computeStats","ENV_GLOBAL_KEY","getGlobal","globalThis","window","global","getCachedEnv","Moderactor","_env","g","refreshEnv","opts","cacheEnv","envFn","idOrArray","chat"],"mappings":"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"}